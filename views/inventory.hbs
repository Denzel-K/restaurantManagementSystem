<section class="inventory">
  <div class="stock">
    <input type="text" id="search" placeholder="Filter by category" />
    <table>
      <thead>
        <tr>
          <th>Item Name</th>
          <th>Quantity</th>
          <th>Unit Price</th>
          <th>Reorder Level</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="inventory-table-body">
        {{!-- Table rows will be inserted here dynamically --}}
      </tbody>
    </table>
    <div class="pagination">
      <button id="prev">Previous</button>
      <button id="next">Next</button>
    </div>
  </div>

  <div class="item-details" style="display:none;">
    <h3>Item Details</h3>
    <p><strong>Item Name:</strong> <span id="item-name"></span></p>
    <p><strong>Category:</strong> <span id="item-category"></span></p>
    <p><strong>Quantity Available:</strong> <span id="item-quantity"></span></p>
    <p><strong>Special Notes:</strong> <span id="item-notes"></span></p>
    <button id="back-to-stock">Back to Stock</button>
  </div>
</section>

<script>
  let currentPage = 1;
  let itemsPerPage = 10;
  let inventoryData = [];

  // Fetch inventory data from the server
  async function fetchInventory() {
    try {
      const response = await fetch('/api/inventory');
      inventoryData = await response.json();
      renderInventoryTable();
    } catch (error) {
      console.error('Error fetching inventory:', error);
    }
  }

  // Render inventory table with pagination and filtering
  function renderInventoryTable() {
    const tableBody = document.getElementById('inventory-table-body');
    tableBody.innerHTML = '';

    const filteredData = filterInventoryByCategory();
    const paginatedData = paginateInventory(filteredData);

    paginatedData.forEach((item) => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${item.item_name}</td>
        <td>${item.quantity}</td>
        <td>${item.unit_price}</td>
        <td>${item.reorder_level}</td>
        <td><button onclick="showItemDetails(${item.id})">Edit</button></td>
      `;
      tableBody.appendChild(row);
    });
  }

  function paginateInventory(filteredData) {
    const start = (currentPage - 1) * itemsPerPage;
    return filteredData.slice(start, start + itemsPerPage);
  }

  // Filter inventory by category
  function filterInventoryByCategory() {
    const searchInput = document.getElementById('search').value.toLowerCase();
    return inventoryData.filter((item) =>
      item.category.toLowerCase().includes(searchInput)
    );
  }

  // Show item details
  function showItemDetails(itemId) {
    const item = inventoryData.find((item) => item.id === itemId);
    if (item) {
      document.querySelector('.stock').style.display = 'none';
      document.querySelector('.item-details').style.display = 'block';

      document.getElementById('item-name').textContent = item.item_name;
      document.getElementById('item-category').textContent = item.category;
      document.getElementById('item-quantity').textContent = item.quantity;
      document.getElementById('item-notes').textContent = item.special_notes;
    }
  }

  // Back to stock list
  document.getElementById('back-to-stock').addEventListener('click', () => {
    document.querySelector('.stock').style.display = 'block';
    document.querySelector('.item-details').style.display = 'none';
  });

  // Pagination buttons
  document.getElementById('prev').addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      renderInventoryTable();
    }
  });

  document.getElementById('next').addEventListener('click', () => {
    if (currentPage * itemsPerPage < inventoryData.length) {
      currentPage++;
      renderInventoryTable();
    }
  });

  // Search input event
  document.getElementById('search').addEventListener('input', renderInventoryTable);

  // Initial load
  fetchInventory();
</script>